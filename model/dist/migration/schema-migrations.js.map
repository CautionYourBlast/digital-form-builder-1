{"version":3,"sources":["../../src/migration/schema-migrations.js"],"names":["SchemaMigrationService","constructor","server","options","logger","Logger","migrations","ListItemReferencesToValueObjects","migrate","formDef","orderedMigrations","sort","a","b","getInitialVersion","initialFormDefVersion","version","applicableMigrations","filter","migration","forEach","migrationInitialVersion","currentFormDefVersion","info","name","getResultantVersion","error","length"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AAOO,MAAMA,sBAAN,CAA6B;AAIhCC,EAAAA,WAAW,CAAEC,MAAF,EAAeC,OAAf,EAA6B;AAAA;AAAA;AACtC,SAAKC,MAAL,GAAc,IAAIC,cAAJ,CAAWH,MAAX,EAAmB,wBAAnB,CAAd;AACA,SAAKI,UAAL,GAAkB,CAAC,IAAIC,yCAAJ,CAAqCL,MAArC,CAAD,CAAlB;AACD;;AAEDM,EAAAA,OAAO,CAAEC,OAAF,EAAgB;AAAA;;AACrB,UAAMC,iBAAiB,GAAG,KAAKJ,UAAL,CAAgBK,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,iBAAF,EAAD,GAA2BD,CAAC,CAACC,iBAAF,EAA1D,CAA1B;AACA,UAAMC,qBAAqB,uBAAGN,OAAO,CAACO,OAAX,+DAAsB,CAAjD;AACA,UAAMC,oBAAoB,GAAGP,iBAAiB,CAACQ,MAAlB,CAAyBC,SAAS,IAAIA,SAAS,CAACL,iBAAV,MAAiCC,qBAAvE,CAA7B;AACAE,IAAAA,oBAAoB,CAACG,OAArB,CAA6BD,SAAS,IAAI;AAAA;;AACxC,YAAME,uBAAuB,GAAGF,SAAS,CAACL,iBAAV,EAAhC;AACA,YAAMQ,qBAAqB,wBAAGb,OAAO,CAACO,OAAX,iEAAsB,CAAjD;;AACA,UAAIM,qBAAqB,KAAKD,uBAA9B,EAAuD;AACrD,aAAKjB,MAAL,CAAYmB,IAAZ,CAAkB,kBAAiBd,OAAO,CAACe,IAAK,iBAAgBH,uBAAwB,OAAMA,uBAAuB,GAAG,CAAE,EAA1H;AACAZ,QAAAA,OAAO,GAAGU,SAAS,CAACX,OAAV,CAAkBC,OAAlB,CAAV;AACAA,QAAAA,OAAO,CAACO,OAAR,GAAkB,KAAKS,mBAAL,CAAyBJ,uBAAzB,CAAlB;AACD,OAJD,MAIO,IAAIA,uBAAuB,GAAGC,qBAA9B,EAAqD;AAC1D,aAAKlB,MAAL,CAAYsB,KAAZ,CAAmB,kCAAiCL,uBAAwB,sCAAqCC,qBAAsB,EAAvI;AACD;AACF,KAVD;;AAWA,QAAIZ,iBAAiB,CAACiB,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,UAAI,KAAKF,mBAAL,CAAyBf,iBAAiB,CAACA,iBAAiB,CAACiB,MAAlB,GAA2B,CAA5B,CAAjB,CAAgDb,iBAAhD,EAAzB,IAAgGC,qBAApG,EAA2H;AACzH,aAAKX,MAAL,CAAYsB,KAAZ,CAAmB,sBAAqBX,qBAAsB,iCAA9D;AACD;AACF;;AACD,WAAON,OAAP;AACD;;AAEDgB,EAAAA,mBAAmB,CAAEJ,uBAAF,EAAmC;AACpD,WAAOA,uBAAuB,GAAG,CAAjC;AACD;;AAlC+B","sourcesContent":["// @flow\n\nimport { Logger } from '../logger'\nimport ListItemReferencesToValueObjects from './list-item-references-to-value-objects'\n\nexport interface Migration {\n    getInitialVersion(): number;\n    migrate(formDef: any): any;\n}\n\nexport class SchemaMigrationService {\n    logger: Logger\n    migrations: Array<Migration>\n\n    constructor (server: any, options: any) {\n      this.logger = new Logger(server, 'SchemaMigrationService')\n      this.migrations = [new ListItemReferencesToValueObjects(server)]\n    }\n\n    migrate (formDef: any) {\n      const orderedMigrations = this.migrations.sort((a, b) => (a.getInitialVersion()) - (b.getInitialVersion()))\n      const initialFormDefVersion = formDef.version ?? 0\n      const applicableMigrations = orderedMigrations.filter(migration => migration.getInitialVersion() >= initialFormDefVersion)\n      applicableMigrations.forEach(migration => {\n        const migrationInitialVersion = migration.getInitialVersion()\n        const currentFormDefVersion = formDef.version ?? 0\n        if (currentFormDefVersion === migrationInitialVersion) {\n          this.logger.info(`Migrating form ${formDef.name} from version ${migrationInitialVersion} to ${migrationInitialVersion + 1}`)\n          formDef = migration.migrate(formDef)\n          formDef.version = this.getResultantVersion(migrationInitialVersion)\n        } else if (migrationInitialVersion > currentFormDefVersion) {\n          this.logger.error(`Found a migration from version ${migrationInitialVersion} but the schema is only at version ${currentFormDefVersion}`)\n        }\n      })\n      if (orderedMigrations.length > 0) {\n        if (this.getResultantVersion(orderedMigrations[orderedMigrations.length - 1].getInitialVersion()) < initialFormDefVersion) {\n          this.logger.error(`New schema version ${initialFormDefVersion} has no corresponding migration`)\n        }\n      }\n      return formDef\n    }\n\n    getResultantVersion (migrationInitialVersion: number) {\n      return migrationInitialVersion + 1\n    }\n}\n"],"file":"schema-migrations.js"}
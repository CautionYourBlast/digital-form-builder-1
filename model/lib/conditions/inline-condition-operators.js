"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperatorNames = getOperatorNames;
exports.getExpression = getExpression;
exports.getOperatorConfig = getOperatorConfig;
exports.relativeDateOrTimeOperatorNames = exports.absoluteDateOrTimeOperatorNames = exports.customOperators = void 0;

var _inlineConditionValues = require("./inline-condition-values");

var defaultOperators = {
  is: inline('=='),
  'is not': inline('!=')
};

function withDefaults(param) {
  return Object.assign({}, param, defaultOperators);
}

var textBasedFieldCustomisations = {
  'is longer than': lengthIs('>'),
  'is shorter than': lengthIs('<'),
  'has length': lengthIs('==')
};
var absoluteDateTimeOperators = {
  is: absoluteDateTime('=='),
  'is not': absoluteDateTime('!='),
  'is before': absoluteDateTime('<'),
  'is after': absoluteDateTime('>')
};

var relativeTimeOperators = function relativeTimeOperators(units) {
  return {
    'is at least': relativeTime('<=', '>=', units),
    'is at most': relativeTime('>=', '<=', units),
    'is less than': relativeTime('>', '<', units),
    'is more than': relativeTime('<', '>', units)
  };
};

var customOperators = {
  CheckboxesField: {
    contains: reverseInline('in'),
    'does not contain': not(reverseInline('in'))
  },
  NumberField: withDefaults({
    'is at least': inline('>='),
    'is at most': inline('<='),
    'is less than': inline('<'),
    'is more than': inline('>')
  }),
  DateField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(_inlineConditionValues.dateUnits)),
  TimeField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(_inlineConditionValues.timeUnits)),
  DatePartsField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(_inlineConditionValues.dateUnits)),
  DateTimeField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(_inlineConditionValues.dateTimeUnits)),
  DateTimePartsField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(_inlineConditionValues.dateTimeUnits)),
  TextField: withDefaults(textBasedFieldCustomisations),
  MultilineTextField: withDefaults(textBasedFieldCustomisations),
  EmailAddressField: withDefaults(textBasedFieldCustomisations)
};
exports.customOperators = customOperators;

function getOperatorNames(fieldType) {
  return Object.keys(getConditionals(fieldType)).sort();
}

function getExpression(fieldType, fieldName, operator, value) {
  return getConditionals(fieldType)[operator].expression({
    type: fieldType,
    name: fieldName
  }, value);
}

function getOperatorConfig(fieldType, operator) {
  return getConditionals(fieldType)[operator];
}

function getConditionals(fieldType) {
  return customOperators[fieldType] || defaultOperators;
}

function inline(operator) {
  return {
    expression: function expression(field, value) {
      return "".concat(field.name, " ").concat(operator, " ").concat(formatValue(field.type, value.value));
    }
  };
}

function lengthIs(operator) {
  return {
    expression: function expression(field, value) {
      return "length(".concat(field.name, ") ").concat(operator, " ").concat(value.value);
    }
  };
}

function reverseInline(operator) {
  return {
    expression: function expression(field, value) {
      return "".concat(formatValue(field.type, value.value), " ").concat(operator, " ").concat(field.name);
    }
  };
}

function not(operatorDefinition) {
  return {
    expression: function expression(field, value) {
      return "not (".concat(operatorDefinition.expression(field, value), ")");
    }
  };
}

function formatValue(fieldType, value) {
  if (fieldType === 'NumberField' || fieldType === 'YesNoField') {
    return value;
  }

  return "'".concat(value, "'");
}

var absoluteDateOrTimeOperatorNames = Object.keys(absoluteDateTimeOperators);
exports.absoluteDateOrTimeOperatorNames = absoluteDateOrTimeOperatorNames;
var relativeDateOrTimeOperatorNames = Object.keys(relativeTimeOperators(_inlineConditionValues.dateTimeUnits));
exports.relativeDateOrTimeOperatorNames = relativeDateOrTimeOperatorNames;

function absoluteDateTime(operator) {
  return {
    expression: function expression(field, value) {
      if (value instanceof _inlineConditionValues.ConditionValue) {
        return "".concat(field.name, " ").concat(operator, " '").concat(value.toExpression(), "'");
      }

      throw Error('only Value types are supported');
    }
  };
}

function relativeTime(pastOperator, futureOperator, units) {
  return {
    units: units,
    expression: function expression(field, value) {
      if (value instanceof _inlineConditionValues.RelativeTimeValue) {
        var operator = value.direction === _inlineConditionValues.dateDirections.PAST ? pastOperator : futureOperator;
        return "".concat(field.name, " ").concat(operator, " ").concat(value.toExpression());
      }

      throw Error('time shift requires a TimeShiftValue');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
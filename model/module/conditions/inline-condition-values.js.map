{"version":3,"sources":["../../src/conditions/inline-condition-values.js"],"names":["conditionValueFactories","Registration","constructor","type","factory","AbstractConditionValue","registration","new","target","TypeError","toPresentationString","toExpression","valueType","registerValueType","obj","ConditionValue","from","value","display","Error","clone","dateDirections","FUTURE","PAST","dateUnits","YEARS","MONTHS","DAYS","timeUnits","HOURS","MINUTES","SECONDS","dateTimeUnits","Object","assign","relativeTimeValueType","RelativeTimeValue","timePeriod","timeUnit","direction","timeOnly","values","map","it","includes","Number","valueFrom"],"mappings":"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","sourcesContent":["const conditionValueFactories = {}\n\nclass Registration {\n  constructor (type, factory) {\n    conditionValueFactories[type] = factory\n    this.type = type\n  }\n}\n\nexport class AbstractConditionValue {\n  constructor (registration) {\n    if (new.target === AbstractConditionValue) {\n      throw new TypeError('Cannot construct ConditionValue instances directly')\n    }\n    if (!(registration instanceof Registration)) {\n      throw new TypeError('You must register your value type! Call registerValueType!')\n    }\n    this.type = registration.type\n  }\n\n  toPresentationString () {}\n  toExpression () {}\n}\n\nconst valueType = registerValueType('Value', obj => ConditionValue.from(obj))\nexport class ConditionValue extends AbstractConditionValue {\n  constructor (value, display) {\n    super(valueType)\n    if (!value || typeof value !== 'string') {\n      throw Error(`value ${value} is not valid`)\n    }\n    if (display && typeof display !== 'string') {\n      throw Error(`display ${display} is not valid`)\n    }\n    this.value = value\n    this.display = display || value\n  }\n\n  toPresentationString () {\n    return this.display\n  }\n\n  toExpression () {\n    return this.value\n  }\n\n  static from (obj) {\n    return new ConditionValue(obj.value, obj.display)\n  }\n\n  clone () {\n    return ConditionValue.from(this)\n  }\n}\n\nexport const dateDirections = {\n  FUTURE: 'in the future',\n  PAST: 'in the past'\n}\n\nexport const dateUnits = {\n  YEARS: { display: 'year(s)', value: 'years' },\n  MONTHS: { display: 'month(s)', value: 'months' },\n  DAYS: { display: 'day(s)', value: 'days' }\n}\nexport const timeUnits = {\n  HOURS: { display: 'hour(s)', value: 'hours' },\n  MINUTES: { display: 'minute(s)', value: 'minutes' },\n  SECONDS: { display: 'second(s)', value: 'seconds' }\n}\nexport const dateTimeUnits = Object.assign({}, dateUnits, timeUnits)\n\nexport const relativeTimeValueType = registerValueType('RelativeTime', obj => RelativeTimeValue.from(obj))\nexport class RelativeTimeValue extends AbstractConditionValue {\n  constructor (timePeriod, timeUnit, direction, timeOnly = false) {\n    super(relativeTimeValueType)\n    if (typeof timePeriod !== 'string') {\n      throw Error(`time period ${timePeriod} is not valid`)\n    }\n    if (!Object.values(dateTimeUnits).map(it => it.value).includes(timeUnit)) {\n      throw Error(`time unit ${timeUnit} is not valid`)\n    }\n    if (!Object.values(dateDirections).includes(direction)) {\n      throw Error(`direction ${direction} is not valid`)\n    }\n    this.timePeriod = timePeriod\n    this.timeUnit = timeUnit\n    this.direction = direction\n    this.timeOnly = timeOnly\n  }\n\n  toPresentationString () {\n    return `${this.timePeriod} ${this.timeUnit} ${this.direction}`\n  }\n\n  toExpression () {\n    const timePeriod = this.direction === dateDirections.PAST ? 0 - Number(this.timePeriod) : this.timePeriod\n    return this.timeOnly ? `timeForComparison(${timePeriod}, '${this.timeUnit}')` : `dateForComparison(${timePeriod}, '${this.timeUnit}')`\n  }\n\n  static from (obj) {\n    return new RelativeTimeValue(obj.timePeriod, obj.timeUnit, obj.direction, obj.timeOnly)\n  }\n\n  clone () {\n    return RelativeTimeValue.from(this)\n  }\n}\n\n/**\n * All value types should call this, and should be located in this file.\n * Furthermore the types should be registered without the classes needing to be instantiated.\n *\n * Otherwise we can't guarantee they've been registered for deserialization before\n * valueFrom is called\n */\nfunction registerValueType (type, factory) {\n  return new Registration(type, factory)\n}\n\nexport function valueFrom (obj) {\n  return conditionValueFactories[obj.type](obj)\n}\n"],"file":"inline-condition-values.js"}
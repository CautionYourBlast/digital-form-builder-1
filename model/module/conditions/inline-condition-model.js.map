{"version":3,"sources":["../../src/conditions/inline-condition-model.js"],"names":["ComponentTypes","getExpression","AbstractConditionValue","valueFrom","coordinators","AND","OR","ConditionsModel","constructor","clone","toReturn","map","it","clear","undefined","name","add","condition","coordinatorExpected","length","getCoordinator","Error","push","_applyGroups","replace","index","splice","remove","indexes","filter","includes","asFirstCondition","addGroups","groupDefs","_group","splitGroup","_ungroup","moveEarlier","switchCoordinators","moveLater","setCoordinator","asPerUserGroupings","hasConditions","lastIndex","toPresentationString","join","toExpression","userGroupedConditions","correctedUserGroups","ConditionGroup","conditions","_autoGroupDefs","reduce","groups","groupDef","find","contains","startsWith","groupConditions","applyTo","splitIndex","isGroup","copy","getGroupedConditions","orPositions","forEach","hasAnd","hasOr","start","position","GroupDef","thisIsTheLastOr","thereAreMoreConditions","toJSON","from","obj","conditionFrom","conditionName","ConditionRef","conditionDisplayName","coordinator","Condition","Field","field","operator","value","first","last","Array","isArray","coordinatorString","conditionString","conditionExpression","type","display","componentType","AbstractCondition","Object","values","_asFirstCondition"],"mappings":"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","sourcesContent":["// @flow\n\nimport ComponentTypes from '../component-types'\nimport { getExpression } from './inline-condition-operators'\nimport { AbstractConditionValue, valueFrom } from './inline-condition-values'\n\ntype Coordinator = 'and' | 'or';\n\nexport const coordinators = {\n  AND: 'and',\n  OR: 'or'\n}\n\nexport class ConditionsModel {\n  #groupedConditions\n  #userGroupedConditions\n  #conditionName\n\n  constructor () {\n    this.#groupedConditions = []\n    this.#userGroupedConditions = []\n  }\n\n  clone () {\n    const toReturn = new ConditionsModel()\n    toReturn.#groupedConditions = this.#groupedConditions.map(it => it.clone())\n    toReturn.#userGroupedConditions = this.#userGroupedConditions.map(it => it.clone())\n    toReturn.#conditionName = this.#conditionName\n    return toReturn\n  }\n\n  clear () {\n    this.#userGroupedConditions = []\n    this.#groupedConditions = []\n    this.#conditionName = undefined\n    return this\n  }\n\n  set name (name: string) {\n    this.#conditionName = name\n  }\n\n  get name () {\n    return this.#conditionName\n  }\n\n  add (condition: ConditionInt<any>) {\n    const coordinatorExpected = this.#userGroupedConditions.length !== 0\n    if (condition.getCoordinator() && !coordinatorExpected) {\n      throw Error('No coordinator allowed on the first condition')\n    } else if (!condition.getCoordinator() && coordinatorExpected) {\n      throw Error('Coordinator must be present on subsequent conditions')\n    }\n    this.#userGroupedConditions.push(condition)\n    this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    return this\n  }\n\n  replace (index: number, condition: ConditionInt<any>) {\n    const coordinatorExpected = index !== 0\n    if (condition.getCoordinator() && !coordinatorExpected) {\n      throw Error('No coordinator allowed on the first condition')\n    } else if (!condition.getCoordinator() && coordinatorExpected) {\n      throw Error('Coordinator must be present on subsequent conditions')\n    } else if (index >= this.#userGroupedConditions.length) {\n      throw Error(`Cannot replace condition ${index} as no such condition exists`)\n    }\n    this.#userGroupedConditions.splice(index, 1, condition)\n    this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    return this\n  }\n\n  remove (indexes: Array<number>) {\n    this.#userGroupedConditions = this.#userGroupedConditions.filter((condition, index) => !indexes.includes(index))\n      .map((condition, index) => index === 0 ? condition.asFirstCondition() : condition)\n\n    this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    return this\n  }\n\n  addGroups (groupDefs: Array<GroupDef>) {\n    this.#userGroupedConditions = this._group(this.#userGroupedConditions, groupDefs)\n    this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    return this\n  }\n\n  splitGroup (index: number) {\n    this.#userGroupedConditions = this._ungroup(this.#userGroupedConditions, index)\n    this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    return this\n  }\n\n  moveEarlier (index: number) {\n    if (index > 0 && index < (this.#userGroupedConditions.length)) {\n      this.#userGroupedConditions.splice(index - 1, 0, this.#userGroupedConditions.splice(index, 1)[0])\n      if (index === 1) {\n        this.switchCoordinators()\n      }\n      this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    }\n    return this\n  }\n\n  moveLater (index: number) {\n    if (index >= 0 && index < (this.#userGroupedConditions.length - 1)) {\n      this.#userGroupedConditions.splice(index + 1, 0, this.#userGroupedConditions.splice(index, 1)[0])\n      if (index === 0) {\n        this.switchCoordinators()\n      }\n      this.#groupedConditions = this._applyGroups(this.#userGroupedConditions)\n    }\n    return this\n  }\n\n  switchCoordinators () {\n    this.#userGroupedConditions[1].setCoordinator(this.#userGroupedConditions[0].getCoordinator())\n    this.#userGroupedConditions[0].setCoordinator(undefined)\n  }\n\n  get asPerUserGroupings () {\n    return [...this.#userGroupedConditions]\n  }\n\n  get hasConditions () {\n    return this.#userGroupedConditions.length > 0\n  }\n\n  get lastIndex () {\n    return this.#userGroupedConditions.length - 1\n  }\n\n  toPresentationString () {\n    return this.#groupedConditions.map(condition => toPresentationString(condition)).join(' ')\n  }\n\n  toExpression () {\n    return this.#groupedConditions.map(condition => toExpression(condition)).join(' ')\n  }\n\n  _applyGroups (userGroupedConditions: Array<ConditionInt<any>>) {\n    const correctedUserGroups = userGroupedConditions\n      .map(condition =>\n        condition instanceof ConditionGroup && condition.conditions.length > 2\n          ? new ConditionGroup(this._group(condition.conditions, this._autoGroupDefs(condition.conditions)))\n          : condition\n      )\n    return this._group(correctedUserGroups, this._autoGroupDefs(correctedUserGroups))\n  }\n\n  _group (conditions: Array<ConditionInt<any>>, groupDefs: Array<GroupDef>) {\n    return conditions.reduce((groups, condition, index, conditions) => {\n      const groupDef = groupDefs.find(groupDef => groupDef.contains(index))\n      if (groupDef) {\n        if (groupDef.startsWith(index)) {\n          const groupConditions = groupDef.applyTo(conditions)\n          groups.push(new ConditionGroup(groupConditions))\n        }\n      } else {\n        groups.push(condition)\n      }\n      return groups\n    }, [])\n  }\n\n  _ungroup (conditions: Array<ConditionInt<any>>, splitIndex: number) {\n    if (conditions[splitIndex].isGroup()) {\n      const copy = [...conditions]\n      copy.splice(splitIndex, 1, ...(conditions[splitIndex].getGroupedConditions()))\n      return copy\n    }\n    return conditions\n  }\n\n  _autoGroupDefs (conditions: Array<ConditionInt<any>>) {\n    const orPositions = []\n    conditions.forEach((condition, index) => {\n      if (condition.getCoordinator() === coordinators.OR) {\n        orPositions.push(index)\n      }\n    })\n    const hasAnd = !!conditions.find(condition => condition.getCoordinator() === coordinators.AND)\n    const hasOr = orPositions.length > 0\n    if (hasAnd && hasOr) {\n      let start = 0\n      const groupDefs = []\n      orPositions.forEach((position, index) => {\n        if (start < position - 1) {\n          groupDefs.push(new GroupDef(start, position - 1))\n        }\n        const thisIsTheLastOr = orPositions.length === index + 1\n        const thereAreMoreConditions = conditions.length - 1 > position\n        if (thisIsTheLastOr && thereAreMoreConditions) {\n          groupDefs.push(new GroupDef(position, conditions.length - 1))\n        }\n        start = position\n      })\n      return groupDefs\n    }\n    return []\n  }\n\n  toJSON (): any {\n    const name = this.#conditionName\n    const conditions = this.#userGroupedConditions\n    return {\n      name: name,\n      conditions: conditions.map(it => it.clone())\n    }\n  }\n\n  static from (obj: any) {\n    if (obj instanceof ConditionsModel) {\n      return obj\n    }\n    const toReturn = new ConditionsModel()\n    toReturn.#conditionName = obj.name\n    toReturn.#userGroupedConditions = obj.conditions.map(it => conditionFrom(it))\n    toReturn.#groupedConditions = toReturn._applyGroups(toReturn.#userGroupedConditions)\n    return toReturn\n  }\n}\n\nfunction conditionFrom (it:any) {\n  if (it.conditions) {\n    return new ConditionGroup(it.conditions.map(condition => conditionFrom(condition)))\n  }\n  if (it.conditionName) {\n    return new ConditionRef(it.conditionName, it.conditionDisplayName, it.coordinator)\n  }\n  return new Condition(Field.from(it.field), it.operator, valueFrom(it.value), it.coordinator)\n}\n\ninterface ConditionInt<A> {\n  coordinatorString(): string;\n  conditionString(): string;\n  conditionExpression(): string;\n  isGroup(): boolean;\n  asFirstCondition () : A;\n  getCoordinator (): ?Coordinator;\n  setCoordinator (coordinator: ?Coordinator) : void;\n  getGroupedConditions(): Array<ConditionInt<any>>;\n  clone(): A;\n}\n\nexport class GroupDef {\n  first: number;\n  last: number;\n\n  constructor (first: number, last: number) {\n    if (typeof first !== 'number' || typeof last !== 'number') {\n      throw Error(`Cannot construct a group from ${first} and ${last}`)\n    } else if (first >= last) {\n      throw Error(`Last (${last}) must be greater than first (${first})`)\n    }\n    this.first = first\n    this.last = last\n  }\n\n  contains (index: number) {\n    return this.first <= index && this.last >= index\n  }\n\n  startsWith (index: number) {\n    return this.first === index\n  }\n\n  applyTo (conditions: Array<ConditionInt<any>>): Array<ConditionInt<any>> {\n    return [...conditions].splice(this.first, (this.last - this.first) + 1)\n  }\n}\n\nclass ConditionGroup implements ConditionInt<ConditionGroup> {\n  conditions: Array<ConditionInt<any>>\n\n  constructor (conditions: Array<ConditionInt<any>>) {\n    if (!Array.isArray(conditions) || conditions.length < 2) {\n      throw Error('Cannot construct a condition group from a single condition')\n    }\n    this.conditions = conditions\n  }\n\n  coordinatorString () {\n    return this.conditions[0].coordinatorString()\n  }\n\n  conditionString () {\n    const copy = [...this.conditions]\n    copy.splice(0, 1)\n    return `(${this.conditions[0].conditionString()} ${copy.map(condition => toPresentationString(condition)).join(' ')})`\n  }\n\n  conditionExpression () {\n    const copy = [...this.conditions]\n    copy.splice(0, 1)\n    return `(${this.conditions[0].conditionExpression()} ${copy.map(condition => toExpression(condition)).join(' ')})`\n  }\n\n  asFirstCondition () {\n    this.conditions[0].asFirstCondition()\n    return this\n  }\n\n  getCoordinator () {\n    return this.conditions[0].getCoordinator()\n  }\n\n  setCoordinator (coordinator: ?Coordinator) {\n    this.conditions[0].setCoordinator(coordinator)\n  }\n\n  isGroup () {\n    return true\n  }\n\n  getGroupedConditions () {\n    return this.conditions.map(condition => condition.clone())\n  }\n\n  clone () {\n    return new ConditionGroup(this.conditions.map(condition => condition.clone()))\n  }\n}\n\nexport function toPresentationString (condition: ConditionInt<any>): string {\n  return `${condition.coordinatorString()}${condition.conditionString()}`\n}\n\nexport function toExpression (condition: ConditionInt<any>): string {\n  return `${condition.coordinatorString()}${condition.conditionExpression()}`\n}\n\nexport class Field {\n  name: string;\n  type: string;\n  display: string;\n\n  constructor (name: string, type: string, display: string) {\n    if (!name || typeof name !== 'string') {\n      throw Error(`name ${name} is not valid`)\n    }\n    if (!ComponentTypes.find(componentType => componentType.name === type)) {\n      throw Error(`type ${type} is not valid`)\n    }\n    if (!display || typeof display !== 'string') {\n      throw Error(`display ${display} is not valid`)\n    }\n    this.name = name\n    this.type = type\n    this.display = display\n  }\n\n  static from (obj: any) {\n    return new Field(obj.name, obj.type, obj.display)\n  }\n}\n\nclass AbstractCondition {\n  coordinator: ?Coordinator;\n\n  constructor (coordinator: ?Coordinator) {\n    if (coordinator && !Object.values(coordinators).includes(coordinator)) {\n      throw Error(`coordinator ${coordinator} is not a valid coordinator`)\n    }\n    this.coordinator = coordinator\n  }\n\n  coordinatorString () {\n    return this.coordinator ? `${this.coordinator} ` : ''\n  }\n\n  getCoordinator () {\n    return this.coordinator\n  }\n\n  setCoordinator (coordinator: ?Coordinator) {\n    this.coordinator = coordinator\n  }\n\n  isGroup () {\n    return false\n  }\n\n  getGroupedConditions () {\n    return [this]\n  }\n\n  _asFirstCondition () {\n    delete this.coordinator\n  }\n\n  asFirstCondition () {\n    throw Error('Implement on the subclass (Why do we have to have this method here at all?!)')\n  }\n\n  clone () {\n    throw Error('Implement on the subclass (Why do we have to have this method here at all?!)')\n  }\n\n  conditionString () {\n    throw Error('Implement on the subclass (Why do we have to have this method here at all?!)')\n  }\n\n  conditionExpression () {\n    throw Error('Implement on the subclass (Why do we have to have this method here at all?!)')\n  }\n}\n\nexport class Condition extends AbstractCondition implements ConditionInt<Condition> {\n  field: Field;\n  operator: string;\n  value: AbstractConditionValue;\n\n  constructor (field: Field, operator: string, value: AbstractConditionValue, coordinator: ?Coordinator) {\n    super(coordinator)\n    if (!(field instanceof Field)) {\n      throw Error(`field ${field} is not a valid Field object`)\n    }\n    if (typeof operator !== 'string') {\n      throw Error(`operator ${operator} is not a valid operator`)\n    }\n    if (!(value instanceof AbstractConditionValue)) {\n      throw Error(`value ${value} is not a valid value type`)\n    }\n    this.field = field\n    this.operator = operator\n    this.value = value\n  }\n\n  asFirstCondition () {\n    this._asFirstCondition()\n    return this\n  }\n\n  conditionString () {\n    return `'${this.field.display}' ${this.operator} '${this.value.toPresentationString()}'`\n  }\n\n  conditionExpression () {\n    return getExpression(this.field.type, this.field.name, this.operator, this.value)\n  }\n\n  clone () {\n    return new Condition(Field.from(this.field), this.operator, this.value.clone(), this.coordinator)\n  }\n}\n\nexport class ConditionRef extends AbstractCondition implements ConditionInt<ConditionRef> {\n  conditionName: string\n  conditionDisplayName: string\n\n  constructor (conditionName: string, conditionDisplayName: string, coordinator: ?Coordinator) {\n    super(coordinator)\n    if (typeof conditionName !== 'string') {\n      throw Error(`condition name ${conditionName} is not valid`)\n    }\n    if (typeof conditionDisplayName !== 'string') {\n      throw Error(`condition display name ${conditionDisplayName} is not valid`)\n    }\n    this.conditionName = conditionName\n    this.conditionDisplayName = conditionDisplayName\n  }\n\n  asFirstCondition () {\n    this._asFirstCondition()\n    return this\n  }\n\n  conditionString () {\n    return `'${this.conditionDisplayName}'`\n  }\n\n  conditionExpression () {\n    return this.conditionName\n  }\n\n  clone () {\n    return new ConditionRef(this.conditionName, this.conditionDisplayName, this.coordinator)\n  }\n}\n"],"file":"inline-condition-model.js"}
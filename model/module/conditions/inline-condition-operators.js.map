{"version":3,"sources":["../../src/conditions/inline-condition-operators.js"],"names":["ConditionValue","dateDirections","dateTimeUnits","dateUnits","RelativeTimeValue","timeUnits","defaultOperators","is","inline","withDefaults","param","Object","assign","textBasedFieldCustomisations","lengthIs","absoluteDateTimeOperators","absoluteDateTime","relativeTimeOperators","units","relativeTime","customOperators","CheckboxesField","contains","reverseInline","not","NumberField","DateField","TimeField","DatePartsField","DateTimeField","DateTimePartsField","TextField","MultilineTextField","EmailAddressField","getOperatorNames","fieldType","keys","getConditionals","sort","getExpression","fieldName","operator","value","expression","type","name","getOperatorConfig","field","formatValue","operatorDefinition","absoluteDateOrTimeOperatorNames","relativeDateOrTimeOperatorNames","toExpression","Error","pastOperator","futureOperator","direction","PAST"],"mappings":"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","sourcesContent":["import {\n  ConditionValue,\n  dateDirections,\n  dateTimeUnits,\n  dateUnits,\n  RelativeTimeValue,\n  timeUnits\n} from './inline-condition-values'\n\nconst defaultOperators = {\n  is: inline('=='),\n  'is not': inline('!=')\n}\n\nfunction withDefaults (param) {\n  return Object.assign({}, param, defaultOperators)\n}\n\nconst textBasedFieldCustomisations = {\n  'is longer than': lengthIs('>'),\n  'is shorter than': lengthIs('<'),\n  'has length': lengthIs('==')\n}\n\nconst absoluteDateTimeOperators = {\n  is: absoluteDateTime('=='),\n  'is not': absoluteDateTime('!='),\n  'is before': absoluteDateTime('<'),\n  'is after': absoluteDateTime('>')\n}\n\nconst relativeTimeOperators = (units) => ({\n  'is at least': relativeTime('<=', '>=', units),\n  'is at most': relativeTime('>=', '<=', units),\n  'is less than': relativeTime('>', '<', units),\n  'is more than': relativeTime('<', '>', units)\n})\n\nexport const customOperators = {\n  CheckboxesField: {\n    contains: reverseInline('in'),\n    'does not contain': not(reverseInline('in'))\n  },\n  NumberField: withDefaults({\n    'is at least': inline('>='),\n    'is at most': inline('<='),\n    'is less than': inline('<'),\n    'is more than': inline('>')\n  }),\n  DateField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(dateUnits)),\n  TimeField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(timeUnits)),\n  DatePartsField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(dateUnits)),\n  DateTimeField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(dateTimeUnits)),\n  DateTimePartsField: Object.assign({}, absoluteDateTimeOperators, relativeTimeOperators(dateTimeUnits)),\n  TextField: withDefaults(textBasedFieldCustomisations),\n  MultilineTextField: withDefaults(textBasedFieldCustomisations),\n  EmailAddressField: withDefaults(textBasedFieldCustomisations)\n}\n\nexport function getOperatorNames (fieldType) {\n  return Object.keys(getConditionals(fieldType)).sort()\n}\n\nexport function getExpression (fieldType, fieldName, operator, value) {\n  return getConditionals(fieldType)[operator].expression({ type: fieldType, name: fieldName }, value)\n}\n\nexport function getOperatorConfig (fieldType, operator) {\n  return getConditionals(fieldType)[operator]\n}\n\nfunction getConditionals (fieldType) {\n  return customOperators[fieldType] || defaultOperators\n}\n\nfunction inline (operator) {\n  return {\n    expression: (field, value) => `${field.name} ${operator} ${formatValue(field.type, value.value)}`\n  }\n}\n\nfunction lengthIs (operator) {\n  return {\n    expression: (field, value) => `length(${field.name}) ${operator} ${value.value}`\n  }\n}\n\nfunction reverseInline (operator) {\n  return {\n    expression: (field, value) => `${formatValue(field.type, value.value)} ${operator} ${field.name}`\n  }\n}\n\nfunction not (operatorDefinition) {\n  return {\n    expression: (field, value) => `not (${operatorDefinition.expression(field, value)})`\n  }\n}\n\nfunction formatValue (fieldType, value) {\n  if (fieldType === 'NumberField' || fieldType === 'YesNoField') {\n    return value\n  }\n  return `'${value}'`\n}\n\nexport const absoluteDateOrTimeOperatorNames = Object.keys(absoluteDateTimeOperators)\nexport const relativeDateOrTimeOperatorNames = Object.keys(relativeTimeOperators(dateTimeUnits))\n\nfunction absoluteDateTime (operator) {\n  return {\n    expression: (field, value) => {\n      if (value instanceof ConditionValue) {\n        return `${field.name} ${operator} '${value.toExpression()}'`\n      }\n      throw Error('only Value types are supported')\n    }\n  }\n}\n\nfunction relativeTime (pastOperator, futureOperator, units) {\n  return {\n    units: units,\n    expression: (field, value) => {\n      if (value instanceof RelativeTimeValue) {\n        const operator = value.direction === dateDirections.PAST ? pastOperator : futureOperator\n        return `${field.name} ${operator} ${value.toExpression()}`\n      }\n      throw Error('time shift requires a TimeShiftValue')\n    }\n  }\n}\n"],"file":"inline-condition-operators.js"}